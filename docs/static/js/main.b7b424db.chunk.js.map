{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","recurse","board","i","min","max","now","randomInteger","num","isVisible","isOpen","rand","Math","random","floor","playAgain","setState","win","handleSelect","Array","fill","changeBoard","state","row","col","select","canSelect","console","log","index","_this2","newBoard","setNewBoard","setTimeout","filter","b","length","winner","_this3","div","selRow","_loop","_i","push","react_default","a","createElement","className","key","onClick","handleProps","map","nums","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7b424db.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let board = new Array(39).fill(null);\r\n\r\n        this.changeBoard(20, board);\r\n\r\n        this.state = {\r\n            board: board,\r\n            row: 4,\r\n            col: 8,\r\n            now: -1,\r\n            select: 20,\r\n            canSelect: [10, 15, 20, 25, 30],\r\n            win: false\r\n        }\r\n    }\r\n\r\n    changeBoard(max, board) {\r\n        for (let i = 1; i <= max; i++) {\r\n            this.recurse(board, i, 0, 2 * max - 1);\r\n            this.recurse(board, i, 0, 2 * max - 1);\r\n        }\r\n        console.log(board);\r\n    }\r\n\r\n    recurse = (board, i, min, max) => {\r\n        const now = this.randomInteger(min, max);\r\n        if (board[now] == null) {\r\n            board[now] = {num: i, isVisible: false, isOpen: false};\r\n        }\r\n        else this.recurse(board, i, min, max);\r\n    };\r\n\r\n    randomInteger = (min, max) => {\r\n        let rand = min + Math.random() * (max + 1 - min);\r\n        rand = Math.floor(rand);\r\n        return rand;\r\n    };\r\n\r\n    setNewBoard(board) {\r\n        this.setState({\r\n            board: board\r\n        });\r\n    }\r\n\r\n    winner() {\r\n        this.setState({win: true});\r\n    }\r\n\r\n    handleProps(index) {\r\n        if (!this.state.board[index].isOpen) {\r\n            let newBoard = this.state.board;\r\n            newBoard[index].isVisible = true;\r\n            this.setNewBoard(newBoard);\r\n            if (this.state.now === -1)\r\n                this.setState({now: index});\r\n            else {\r\n                if (this.state.board[this.state.now].num === this.state.board[index].num && index !== this.state.now) {\r\n                    let newBoard = this.state.board;\r\n                    newBoard[index].isOpen = true;\r\n                    newBoard[this.state.now].isOpen = true;\r\n                    this.setState({now: -1});\r\n                    this.setNewBoard(newBoard);\r\n                }\r\n                else {\r\n                    setTimeout(() => {\r\n                        let newBoard = this.state.board;\r\n                        newBoard[index].isVisible = false;\r\n                        newBoard[this.state.now].isVisible = false;\r\n                        this.setState({now: -1});\r\n                        this.setNewBoard(newBoard);\r\n                    }, 200);\r\n                }\r\n            }\r\n        }\r\n        if (this.state.board.filter(b => b.isOpen).length === this.state.board.length)\r\n            this.winner();\r\n    }\r\n\r\n    handleSelect(select) {\r\n        let row, col;\r\n        if (select === 30) {\r\n            row = 5;\r\n            col = 10;\r\n        }\r\n        if (select === 20) {\r\n            row = 4;\r\n            col = 8;\r\n        }\r\n        if (select === 10) {\r\n            row = 4;\r\n            col = 5;\r\n        }\r\n        if (select === 15) {\r\n            row = 5;\r\n            col = 6;\r\n        }\r\n        if (select === 25) {\r\n            row = 5;\r\n            col = 10;\r\n        }\r\n        let board = [];\r\n        this.changeBoard(select, board);\r\n        this.setState({board: board, select: select, row: row, col: col});\r\n    }\r\n\r\n    playAgain = () => {\r\n        this.setState({win: false});\r\n        this.handleSelect(20);\r\n    };\r\n\r\n    render() {\r\n        let div = [], row = [], selRow = 0;\r\n        for (let i = 0; i < this.state.board.length; i++) {\r\n            if ((i - selRow * this.state.col) < this.state.col) {\r\n                row.push(\r\n                    <button className=\"num_button card box\" key={i}\r\n                            onClick={() => this.handleProps(i)}>\r\n                        {this.state.board[i].isVisible ?\r\n                            this.state.board[i].num : ' '}\r\n                    </button>\r\n                );\r\n            }\r\n            else {\r\n                selRow++;\r\n                div.push(<div className=\"row\">{row}</div>);\r\n                row = [];\r\n                i--;\r\n            }\r\n        }\r\n        div.push(<div className=\"row\">{row}</div>);\r\n        return (\r\n            <div className=\"App\">\r\n                {\r\n                    this.state.win ?\r\n                        <header className=\"App-header\">\r\n                            <h1>YOU WIN</h1>\r\n                            <button className=\"niceBtn\" onClick={this.playAgain}>play again?</button>\r\n                        </header>\r\n                        :\r\n                    <header className=\"App-header\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                this.state.canSelect.map(nums =>\r\n                                    <button className=\"niceBtn\" key={nums} onClick={() => this.handleSelect(nums)}>{nums}</button>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                div\r\n                            }\r\n                        </div>\r\n                    </header>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}